#!/bin/bash

################################################################################
########################## Check Conflicts Repo ################################
################################################################################

###########################################################
# NOTE:                                                   #
# You must have a githubteacher token                     #
# saved to your ENV variables in order to use this script #
###########################################################
collabrepo=$1

################################################################################
########################## Functions Below #####################################
################################################################################
################################################################################
#### Function ContainsElement ##################################################
function ContainsElement ()
{
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 1; done
  return 0
}
################################################################################
#### Function getnames #########################################################
function getnames ()
{
  #get name of collaborators from day 1
  collabs=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://$INSTANCE_URL/repos/$CLASS_ORG/$collabrepo/collaborators?per_page=100 | jq '.[] | .login') >> log.out 2>&1
  for i in ${collabs[@]}
  do
    if
      ContainsElement $i $ownersArray
    then
      CheckRepo $i
    fi
  done
}
################################################################################
#### Function CheckRepo ########################################################
function CheckRepo ()
{
  student=$1
  student=$(echo "$student" | (sed -e 's/^"//' -e 's/"$//'))
  studentRepo="conflict-practice-"$student
  #start student file
  echo "---" > conflict-activity-$student.json
  echo "githubHandle: $student" >> conflict-activity-$student.json
  #check to see if pull requests created by script have been merged
  for i in {1..3};
  do
    prstatus=$(curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://$INSTANCE_URL/repos/$CLASS_ORG/$studentRepo/pulls/$i/merge) >> log.out 2>&1
    if echo $prstatus | grep -iq "204"
    then
      echo "PR $i status is 204"
      echo "pr$i: merged" >> conflict-activity-$student.json
      if [ "$i" == "1" ]
      then
        #search for conflict markers
        startmark1=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/index.html" | grep -c -i '<<<<<<<') >> log.out 2>&1
        echo "search for <<<<<<< found $startmark1"
        divmark1=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/css/index.html" | grep -c -i '=======') >> log.out 2>&1
        echo "search for ======= found $divmark1"
        endmark1=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/css/index.html" | grep -c -i '>>>>>>>') >> log.out 2>&1
        echo "search for >>>>>>> found $endmark1"
        startmark2=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/play/manual/manual.html" | grep -c -i '<<<<<<<') >> log.out 2>&1
        echo "search for <<<<<<< found $startmark2"
        divmark2=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/play/manual/manual.html" | grep -c -i '=======') >> log.out 2>&1
        echo "search for ======= found $divmark2"
        endmark2=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/play/manual/manual.html" | grep -c -i '>>>>>>>') >> log.out 2>&1
        echo "search for >>>>>>> found $endmark2"
        startmark3=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/play/mini/mini_bored.html" | grep -c -i '<<<<<<<') >> log.out 2>&1
        echo "search for <<<<<<< found $startmark3"
        divmark3=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/play/mini/mini_bored.html" | grep -c -i '=======') >> log.out 2>&1
        echo "search for ======= found $divmark3"
        endmark3=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/css/play/mini/mini_bored.html" | grep -c -i '>>>>>>>') >> log.out 2>&1
        echo "search for >>>>>>> found $endmark3"
        #make sure play/manual/manual.html still exists
        checkfile=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://api.github.com/search/code?q=manual.html+in:path+repo:githubschool/$studentRepo" | jq .total_count) >> log.out 2>&1
        # echo "search for play/manual/manual.html returned $checkfile"
        echo "The answers are represent starting conflict markets, middle conflict markers, ending conflict markers, and if the deleted file is present (null = not present, 0 = present with another unnecessary file, 1 = correct files present)." >> conflict-activity-$student.json
        echo "correct answers would be: 0,0,0,0,0,0,0,0,0,1" >> conflict-activity-$student.json
        echo "checks$i:$startmark1,$divmark1,$endmark1,$startmark2,$divmark2,$endmark2,$startmark3,$divmark3,$endmark3,$checkfile" >> conflict-activity-$student.json
      elif [ "$i" == "2" ]
      then
        #search for conflict markers
        startmark=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/css/index.css" | grep -c -i '<<<<<<<') >> log.out 2>&1
        echo "search for <<<<<<< found $startmark"
        divmark=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/css/index.css" | grep -c -i '=======') >> log.out 2>&1
        echo "search for ======= found $divmark"
        endmark=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/css/index.css" | grep -c -i '>>>>>>>') >> log.out 2>&1
        echo "search for >>>>>>> found $endmark"
        echo "correct answers would be: 0,0,0" >> conflict-activity-$student.json
        echo "checks$i:$startmark,$divmark,$endmark" >> conflict-activity-$student.json
      else
        #search for conflict markers
        startmark=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/README.md" | grep -c -i '<<<<<<<') >> log.out 2>&1
        echo "search for <<<<<<< found $startmark"
        divmark=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/README.md" | grep -c -i '=======') >> log.out 2>&1
        echo "search for ======= found $divmark"
        endmark=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://raw.githubusercontent.com/githubschool/$studentRepo/master/README.md" | grep -c -i '>>>>>>>') >> log.out 2>&1
        echo "search for >>>>>>> found $endmark"
        echo "correct answers would be: 0,0,0" >> conflict-activity-$student.json
        echo "checks$i:$startmark,$divmark,$endmark" >> conflict-activity-$student.json
      fi
    else
      echo "PR $i has not been merged"
      echo "pr$i: incomplete" >> conflict-activity-$student.json
    fi
  done
  echo "---" >> conflict-activity-$student.json
  #send graded file to original class repo
  #first, encode file as base64
  newfile=$(cat conflict-activity-$student.json | base64)
  #does the file already exist?
  status=$(curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://$INSTANCE_URL/repos/$CLASS_ORG/$collabrepo/contents/_grades/conflict-activity-$student.json | grep "^Status:") >> log.out 2>&1
  if echo "$status" | grep -iq "404" ;
  then
    #create the file on the repo
    curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"path\": \"_grades/conflict-activity-$student.json\", \"message\": \"Graded conflict activity for $student\", \"content\": \"$newfile\"}" -X PUT https://$INSTANCE_URL/repos/$CLASS_ORG/$collabrepo/contents/_grades/conflict-activity-$student.json >> log.out 2>&1
  else
    #get the sha
    sha=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://$INSTANCE_URL/repos/$CLASS_ORG/$collabrepo/contents/_grades/conflict-activity-$student.json | jq .sha) >> log.out 2>&1
    echo "Replacing the file at sha: $sha"
    #replace the file
    curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"path\": \"_grades/conflict-activity-$student.json\", \"message\": \"Graded conflict activity for $student\", \"content\": \"$newfile\", \"sha\": $sha}" -X PUT https://$INSTANCE_URL/repos/$CLASS_ORG/$collabrepo/contents/_grades/conflict-activity-$student.json >> log.out 2>&1
  fi
  rm conflict-activity-$student.json
}
################################################################################
############################### MAIN ###########################################
################################################################################
########################################
# Get name of collaborators from day 1 #
########################################
ownersArray=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/orgs/$CLASS_ORG/members?role=admin" | jq '.[] | .login') >> log.out 2>&1

######################
# Get the user names #
######################
getnames
