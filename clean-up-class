#!/bin/bash

################################################################################
############################### Cleanup Class ##################################
################################################################################

###########################################################
# NOTE:                                                   #
# You must have a githubteacher token                     #
# saved to your ENV variables in order to use this script #
###########################################################

###########
# GLOBALS #
###########
COLLAB_REPO=$1

################################################################################
########################## Functions Below #####################################
################################################################################
################################################################################
#### Function containsElement ##################################################
function containsElement ()
{
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 1; done
  return 0
}
################################################################################
#### Function getNames #########################################################
function getNames ()
{
  # Get teacher from the README along with a list of commenters on the first class issue
  TEACHER=$(curl -H "Accept: application/vnd.github.VERSION.raw" -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/contents/README.md" | grep "^- Facilitator: @" | sed 's/- Facilitator: @//') >> log.out 2>&1
  COMMENTERS=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues/1/comments?per_page=100" | jq '.[] | .user.login') >> log.out 2>&1

  # Create conflict repos based on commenters in the inital class issue plus the teacher
  USER_NAMES=( "${COMMENTERS[@]} $TEACHER" )
  for USER in "${USER_NAMES[@]}"
  do
    #####################
    # Cleanup user info #
    #####################
    USER=$(echo "$USER" | (sed -e 's/^"//' -e 's/"$//'))

    ##################################################
    # Clean up conflict and games repos for the user #
    ##################################################
    CleanUpRepo "conflict-practice-$USER"
    CleanUpRepo "github-games-$USER"
  done
}
################################################################################
#### Function CleanUpRepo ######################################################
function CleanUpRepo ()
{
  ################
  # Get the Repo #
  ################
  REPO=$1

  ###################
  # Get repo status #
  ###################
  REPO_STATUS=$(curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$REPO" | grep "^Status:") >> log.out 2>&1

  ####################
  # Check the return #
  ####################
  if
    echo "$REPO_STATUS" | grep -iq "200"
  then
    ###################
    # Remove the repo #
    ###################
    script/remove-repo "$REPO"
  fi
}
################################################################################
############################### MAIN ###########################################
################################################################################

##################
# Get User names #
##################
GetNames
