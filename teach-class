#!/bin/bash
################################################################################
############################ Teach Class #######################################
################################################################################

############################
# Set the exit on non zero #
############################
set -e

###########
# GLOBALS #
###########

################################################################################
########################## Functions Below #####################################
################################################################################
################################################################################
#### Function GetTask ##########################################################
function GetTask ()
{
  echo ""
  echo "========================================================"
  echo "This script manages the repos and activities"
  echo "for the GitHub for Developers training."
  echo "========================================================"
  echo ""
  echo "NOTE: If you have NOT ran: 0 Confirm Set-up, please run this task first"
  echo "      as it is needed to set all base environment variables!"
  echo ""
  echo ""
  echo "What would you like to do? (Just the number please)"
  echo "0: Confirm Set-up"
  echo "1: Add collabs and create files (also makes the repo private)"
  echo "2: Grade the day 1 repo"
  echo "3: Create conflict repos for each student"
  echo "4: Create the github-games repos for each student"
  echo "5: Expire student repos"
  echo "6: Done"
  echo ""

  ################################
  # Read the task that was input #
  ################################
  read TASK

  ############################################
  # Clean any whitespace that may be entered #
  ############################################
  TASK_NO_WHITESPACE="$(echo -e "$TASK" | tr -d '[:space:]')"
  TASK=$TASK_NO_WHITESPACE

  ############################
  # Validate we got a number #
  ############################
  REGEX='^[0-9]+$'
  if ! [[ $TASK =~ $REGEX ]] ; then
    echo "ERROR: [$TASK] is not a number!"
    exit 1
  fi

  ################
  # If were done #
  ################
  if [ $TASK -eq 6 ]; then
    # Exit script
    exit 0
  #######################
  # Were running a task #
  #######################
  else
    # Run a task
    DoTask "$TASK"
  fi
}
################################################################################
#### Function DoTask ###########################################################
function DoTask ()
{
  ####################
  # Read in the TASK #
  ####################
  TASK=$1

  #######################
  # Set the collab repo #
  #######################
  COLLAB_REPO=''

  #########################################
  # See if we need to get the collab repo #
  #########################################
  if [ $TASK -ne 0 ] || [ $TASK -ne 6 ]; then
    echo "What is the name of the day 1 repo?"
    ########################
    # Read the collab repo #
    ########################
    read COLLAB_REPO
  fi

  ##########
  # TASK 0 #
  ##########
  if [ $TASK -eq 0 ]; then
    echo "running script/class-setup"
    script/class-setup
    echo "=============================="
    echo "Set-up is complete"
    echo "=============================="
    exit
  ##########
  # TASK 1 #
  ##########
  elif [ $TASK -eq 1 ]; then
    echo "running script/create-files"
    script/create-files $COLLAB_REPO
  ##########
  # TASK 2 #
  ##########
  elif [ $TASK -eq 2 ]; then
    echo "running script/check-caption-repo"
    script/check-caption-repo $COLLAB_REPO
  ##########
  # TASK 3 #
  ##########
  elif [ $TASK -eq 3 ]; then
    echo "running script/create-conflict-repos"
    script/create-conflict-repos $COLLAB_REPO
  ##########
  # TASK 4 #
  ##########
  elif [ $TASK -eq 4 ]; then
    echo "running script/create-game-repos"
    script/create-game-repos $COLLAB_REPO
  ##########
  # TASK 5 #
  ##########
  elif [ $TASK -eq 5 ]; then
    echo "running script/expire-repo"
    script/expire-repo
  fi
}
################################################################################
############################### MAIN ###########################################
################################################################################

#######################
# Get the task to run #
#######################
GetTask
