#!/bin/bash

################################################################################
############################### Class Setup ####################################
################################################################################

###########
# GLOBALS #
###########
NEW_NAME=''        # Token owners name
NEW_TOKEN=''       # Token owners PAT
NEW_URL=''         # Instance url to GHE
NEW_ORG=''         # New instance GHE Organization
SURVEY_TOKEN=''    # token to complete survey
SURVEY_SECRET=''   # Secret for survey
SURVEY_CAMPAIGN='' # Campaign for survey
APPT_URL=''        # Url for appointment
SHELL=''          # What shell the user is using

################################################################################
########################## Functions Below #####################################
################################################################################
################################################################################
#### Function ValidateJQ #######################################################
function ValidateJQ ()
{
  ############################
  # Validate JQ is installed #
  ############################
  type jq >/dev/null 2>&1 || { >&2 "You don't have jq installed, grab it from https://stedolan.github.io/jq/download/"; exit 1; }
}
################################################################################
#### Function CreateRCFile #####################################################
function CreateRCFile ()
{
  ###########################
  # Create training rc file #
  ###########################
  echo "==============================================="
  echo "We'll create a file to store all training related configs."
  echo "Checking for and creating ~/.trainingmanualrc..."

  ######################
  # See if file exists #
  ######################
  [ ! -f "$HOME/.trainingmanualrc" ] && touch "$HOME/.trainingmanualrc"
  echo "==============================================="
  echo ""
  echo "==============================================="
}
################################################################################
#### Function TokenOwner #######################################################
function TokenOwner ()
{
  ##############################
  # See if we have token owner #
  ##############################
  if [ -z ${TOKEN_OWNER+x} ]
    then
      echo "It looks like we'll need to add the TOKEN_OWNER var"
      echo "to your ~/.trainingmanualrc. Please type the github username"
      echo "you'll be using today and we'll add this automatically. Remember, this"
      echo "user will need to have full admin access to the teaching organization."
      read NEW_NAME
      echo "export TOKEN_OWNER='$NEW_NAME'" >> $HOME/.trainingmanualrc
    else
      echo "TOKEN_OWNER = $TOKEN_OWNER."
  fi
  echo "==============================================="
}
################################################################################
#### Function TeacherPAT #######################################################
function TeacherPAT ()
{
  ##############################
  # See if we have teacher pat #
  ##############################
  if [ -z ${TEACHER_PAT+x} ]; then
    echo "It looks like we need to add the"
    echo "TEACHER_PAT var to your ~/.trainingmanualrc."
    echo "Please generate a Personal Access token on the"
    echo "account you'll be teaching from and paste it here."
    read NEW_TOKEN
    echo "export TEACHER_PAT='$NEW_TOKEN'" >> $HOME/.trainingmanualrc
  else
    echo "TEACHER_PAT is set!"
  fi

  echo "==============================================="
}
################################################################################
#### Function InstanceURL ######################################################
function InstanceURL ()
{
  ###############################
  # See if we have instance url #
  ###############################
  if [ -z ${INSTANCE_URL+x} ]; then
    echo "It looks like you need to add the"
    echo "INSTANCE_URL var to your ~/.trainingmanualrc. Please type the"
    echo "root endpoint for your github instance."
    echo "For example: api.github.com OR github.mycompany.com/api/v3"
    read NEW_URL
    echo "Checking if '$NEW_URL' is accessible... (this may take several minutes)"
    curl -s $NEW_URL >> log.out 2>&1
    if [ 0 -eq $? ]
      then
        echo "API endpoint verified"
      else
        echo "Can't access your API via that URL, perhaps it needs authentication, checking..."
    fi

    echo "Checking if '$NEW_URL' is accessible with authentication..."

    if [[ $(curl -s -u "$NEW_NAME:$NEW_TOKEN" https://$NEW_URL/ | jq .message) = null ]]
      then
        echo "API endpoint + authentication verified"
        echo "export INSTANCE_URL='$NEW_URL'" >> $HOME/.trainingmanualrc
      else
        echo "Can't make an authenticated request to the API."
        exit 1
    fi
    if echo "$NEW_URL" | grep -iq "\<api.github.com\>" ;
      then
        echo "export ROOT_URL='github.com'" >> $HOME/.trainingmanualrc
      else
        #strip the API part
        strippedURL=$(echo "$NEW_URL" | sed -E 's/\/api\/v3//')
        echo "export ROOT_URL='$strippedURL'" >> $HOME/.trainingmanualrc
    fi
  else
    echo "INSTANCE_URL = $INSTANCE_URL"
    echo "ROOT_URL = $ROOT_URL"
  fi

  echo "==============================================="
}
################################################################################
#### Function ClassOrg #########################################################
function ClassOrg ()
{
  ##########################
  # See if we have the Org #
  ##########################
  if [ -z ${CLASS_ORG+x} ]
    then
      echo "It looks like you need to add the CLASS_ORG var"
      echo "to your ~/.trainingmanualrc. Please type the organization name"
      echo "used for github training on your instance."
      echo "For example: githubschool"
      read NEW_ORG
      echo "Checking if $NEW_ORG is accessible via the API..."
      if [[ $(curl -s -u "$NEW_NAME:$NEW_TOKEN" https://$NEW_URL/orgs/$NEW_ORG | jq .message) = null ]]
            then
          echo "That organization was verified."
          echo "export CLASS_ORG='$NEW_ORG'" >> $HOME/.trainingmanualrc
        else
          echo "Can't access the organization via the API."
          exit 1
      fi
    else
      echo "CLASS_ORG = $CLASS_ORG"
  fi
  echo "==============================================="
}
################################################################################
#### Function SurveyToken ######################################################
function SurveyToken ()
{
  ###################################
  # See if we have the survey token #
  ###################################
  if [ -z ${SURVEY_TOKEN+x} ]
    then
      echo "The scripts use the SurveyGizmo API to auto-generate"
      echo "the post-class survey. You will need to add the API"
      echo "Key found in SurveyGizmo (Log In -> Account -> Integrations -> API Key)"
      echo " to your ~/.trainingmanualrc. Please paste the API Key below:"
      read SURVEY_TOKEN
      echo "export SURVEY_TOKEN='$SURVEY_TOKEN'" >> $HOME/.trainingmanualrc
    else
      echo "SURVEY_TOKEN is set!"
  fi
  echo "==============================================="
}
################################################################################
#### Function SurveySecret #####################################################
function SurveySecret ()
{
  ####################################
  # See if we have the survey secret #
  ####################################
  if [ -z ${SURVEY_SECRET+x} ]
    then
      echo "The SurveyGizmo API also requires a secret key."
      echo "You will need to add the api"
      echo "secret key generated by SurveyGizmo to your ~/.trainingmanualrc."
      echo "Please paste it below:"
      read SURVEY_SECRET
      echo "export SURVEY_SECRET='$SURVEY_SECRET'" >> $HOME/.trainingmanualrc
    else
      echo "SURVEY_SECRET is set!"
  fi
  echo "==============================================="
}
################################################################################
#### Function SurveyCampaign ###################################################
function SurveyCampaign ()
{
  #####################################
  # See if we have the survey campain #
  #####################################
  if [ -z ${SURVEY_CAMPAIGN+x} ]
    then
      echo "The survey created in SurveyGizmo is assigned a unique"
      echo "campaign number. Go ahead and add it to your ~/.trainingmanualrc."
      echo "By pasting it below:"
      read SURVEY_CAMPAIGN
      echo "export SURVEY_CAMPAIGN='$SURVEY_CAMPAIGN'" >> $HOME/.trainingmanualrc
    else
      echo "SURVEY_CAMPAIGN = $SURVEY_CAMPAIGN"
  fi
  echo "==============================================="
}
################################################################################
#### Function ApptURL ##########################################################
function ApptURL ()
{
  ###############################
  # See if we have the appt url #
  ###############################
  if [ -z ${APPT_URL+x} ]
    then
      echo "If you will offer 1:1 appointments with your students,"
      echo "you will need to add the booking URL to your ~/.trainingmanualrc"
      echo "by pasting it below:"
      read APPT_URL
      echo "export APPT_URL='$APPT_URL'" >> $HOME/.trainingmanualrc
    else
      echo "APPT_URL = $APPT_URL"
  fi
  echo "==============================================="
}
################################################################################
#### Function ShellCheck #######################################################
function ShellCheck ()
{
  #########################
  # Check the users shell #
  #########################
  echo "What kind of shell are you using?"
  echo "acceptable options: bash, zsh"
  read SHELL
  echo "Adding to your .${SHELL}rc..."
  echo "\n# added by github/training-manual class setup" >> $HOME/.${SHELL}rc
  echo "test -f \"$HOME/.trainingmanualrc\" && source \"$HOME/.trainingmanualrc\"" >> $HOME/.${SHELL}rc

  echo "ATTENTION: You must restart your open terminal sessions"
  echo "for changes to take effect."
}

################################################################################
############################### MAIN ###########################################
################################################################################

###############
# Validate jq #
###############
ValidateJQ
##################
# Create rc file #
##################
CreateRCFile
#######################
# Get the token owner #
#######################
TokenOwner
#######################
# Get the teacher pat #
#######################
TeacherPAT
########################
# Get the instance url #
########################
InstanceURL
#####################
# Get the class org #
#####################
ClassOrg
########################
# Get the survey token #
########################
SurveyToken
#########################
# Get the survey secret #
#########################
SurveySecret
##########################
# Get the survey capaign #
##########################
SurveyCampaign
####################
# Get the appt url #
####################
ApptURL
#########################
# Check the users shell #
#########################
ShellCheck
