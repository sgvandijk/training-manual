#!/usr/bin/env bash
#
# Create game repos

#################################################################
# NOTE: You must have a personal access token (PAT)             #
# saved to your environment variables to use this script.       #
# We recommend a dedicated service account (e.g. githubteacher) #
#################################################################

# shellcheck source=script/shared_functions
source ./shared_functions

# shell variables
collab_repo=$1
org_url="https://$ROOT_URL/$CLASS_ORG"
org_endpoint="https://$INSTANCE_URL/repos/$CLASS_ORG"
template_name="github-games"
template_url="https://github.com/githubtraining/$template_name"
template_url_ghes="https://$ROOT_URL/$CLASS_ORG/$template_name"
template_pages_url="https://$CLASS_ORG.github.io/$template_name"
template_pages_url_ghes="https://$ROOT_URL/pages/$CLASS_ORG/$template_name"

check_template_url() {
  # if root url is not github.com
  if [ "$ROOT_URL" != "github.com" ]; then
    # if template can be found on GHES
    if repo_is_reachable "$template_url_ghes"; then
      # use template and GitHub Pages URL from GHES instead of the public template
      template_url="$template_url_ghes"
      template_pages_url="$template_pages_url_ghes"
    # otherwise check if public template can be reached
    elif repo_is_reachable "$template_url"; then
      echo "Template not found on $ROOT_URL. Using public template instead: $template_url"
    else # template could not be reached
      print_error "Could not reach template repo. Please grab a copy from $template_url and upload it to your GHES instance."
    fi
  # if template cannot be reached
  elif ! repo_is_reachable "$template_url"; then
    print_error "Unable to reach template repo: $template_url"
  fi
}

clone_template() {
  # create a temporary directory for temporary files
  temp_dir=$(mktemp -d)

  # delete the temporary directory on script exit
  trap 'rm -rf "$temp_dir"' EXIT

  # attempt to clone template repo
  git clone --bare "$template_url" "$temp_dir" >>log.out 2>&1 || {
    # if git clone command failed
    print_error "Failed to clone template repository."
    exit 1
  }
}

generate_repos() {
  # Create github-games repos based on collaborators in the inital class repo
  # :? will display an error if $collaborators is empty or unset
  for username in "${collaborators[@]:?}"; do
    # if a github-games repo has already been created for the user
    if repo_is_reachable "$org_url/github-games-$username"; then
      # ask if the repository should be deleted and recreated
      if ask "A github-games repo already exists for $username. Is it OK to delete and recreate?" N; then
        echo "Deleting $CLASS_ORG/github-games-$username..."
        # delete the existing github-games repo
        curl -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
          -X DELETE "$org_endpoint/github-games-$username" >>log.out 2>&1
        # create a new github-games repo
        create_repo "$username"
      else
        echo "OK. Skipping $username..."
      fi
    else
      # create a new github-games repository
      create_repo "$username"
    fi
  done
}

create_repo() {
  student=$1
  local repo_name="$template_name-$student"
  local repo_url="https://$ROOT_URL/$CLASS_ORG/$repo_name"
  if [[ "$ROOT_URL" == "github.com" ]]; then
    local pages_url="https://$CLASS_ORG.github.io/$repo_name"
  else
    local pages_url="https://$ROOT_URL/pages/$CLASS_ORG/$repo_name"
  fi

  echo "Creating $CLASS_ORG/$repo_name for $student..."

  # Create a new repo named github-games-$student in $CLASS_ORG
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
    "{ \"name\": \"${repo_name}\", \"description\": \"A fun way to learn about git troubleshooting.\", \"homepage\": \"${template_pages_url}\", \"private\": false, \"has_issues\": true, \"has_wiki\": true, \"has_downloads\": true}" \
    -X POST "https://${INSTANCE_URL}/orgs/${CLASS_ORG}/repos" >>log.out 2>&1

  # Add student as a collaborator
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
    -X PUT "$org_endpoint/$repo_name/collaborators/$student" >>log.out 2>&1

  echo "Pushing commits to $CLASS_ORG/$repo_name..."
  git push --mirror "https://$TOKEN_OWNER:$TEACHER_PAT@$ROOT_URL/$CLASS_ORG/$repo_name" >>log.out 2>&1 || {
    # if git push command failed
    print_error "Failed to push."
    exit 1
  }

  # Set default branch to main
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{\"default_branch\":\"main\"}" \
    -X PATCH "$org_endpoint/$repo_name" >>log.out 2>&1

  # Create issues for problems
  {
    curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
      -d "{ \"title\": \"Game broken\", \"body\": \"When attempting to access this at ${pages_url}, I am getting a 404. This could be caused by a couple things:\n\n - GitHub pages needs to be enabled on main. You can fix this in the repository settings.\n- the index.html file is incorrectly named inde.html. We will fix this together in class.\n\n Can you please fix the first bullet @$student?\"}" \
      -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$repo_name/issues"
    curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
      -d "{ \"title\": \"URL in description and README broken\", \"body\": \"The URL in the repository description and README are pointing to ${CLASS_ORG}'s copy of the game instead of yours. \n\n Please fix both so they point to your copy of the game at ${pages_url}\"}" \
      -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$repo_name/issues"
  } >>log.out 2>&1

  print_done "Repo URL: $repo_url"
}

# get list of repo collaborators
get_collaborators "$collab_repo"

# check template url
check_template_url

# clone template repository
clone_template

# switch to temp directory and push it on the stack
pushd "$temp_dir" >>log.out 2>&1 || return

# generate a repo for each collaborator
generate_repos

# switch back to original directory
popd >>log.out 2>&1 || return

print_success "All $template_name repos can be found here: $org_url"
