#!/bin/bash

################################################################################
############################## Create Files ####################################
################################################################################

################
# Source it up #
################
# shellcheck disable=SC1090
source "$HOME/.trainingmanualrc"

###########################################################
# You must have a githubteacher token                     #
# saved to your ENV variables in order to use this script #
###########################################################

###########
# GLOBALS #
###########
COLLAB_REPO=$1

################################################################################
########################## Functions Below #####################################
################################################################################
################################################################################
#### Function ContainsCollab ##################################################
function ContainsCollab ()
{
  local e
  for e in ${@}; do
    if [[ "$e" == "$1" ]]
    then
      return 0
    fi
  done
  return 1
}
################################################################################
#### Function GetNames #########################################################
function GetNames ()
{
  #######################################################
  # get names of people who have commented on the issue #
  #######################################################
  COUNTER=$(expr ${#COLLABS[@]} + 2)
  for i in ${COMMENTERS[@]}
  do
    j=$(echo "$i" | (sed -e 's/^"//' -e 's/"$//'))
    if
      ######################
      # Check the elements #
      ######################
      ContainsCollab "$i" "$COLLABS"
    then
      ###############
      # Add collab #
      ##############
      AddCollab "$j"
      if [ "$j" != "$TOKEN_OWNER" ]
      then
        ###################
        # Create the file #
        ###################
        CreateFile "$j" "$COUNTER"
        ((COUNTER++))
      else
        echo "Skipping creating another file for $j because they are the instructor."
      fi
    else
      echo "Skipping adding $j as a collaborator because they are already a collaborator."
    fi
  done

  ####################
  # Create the issue #
  ####################
  CreateIssue "$COUNTER"
}
################################################################################
#### Function AddCollab ########################################################
function AddCollab ()
{
  ####################
  # Pull in the vars #
  ####################
  STUDENT=$1
  COLLABS+=("$STUDENT")

  #############
  # Set it up #
  #############
  STUDENT=$(echo "$STUDENT" | (sed -e 's/^"//' -e 's/"$//'))
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -X PUT "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/collaborators/$STUDENT" >> log.out 2>&1
}
################################################################################
#### Function CreateFile #########################################################
function CreateFile ()
{
  ####################
  # Pull in the vars #
  ####################
  STUDENT=$1
  COUNTER=$2

  #####################
  # Check the counter #
  #####################
  if [ "$COUNTER" -le 9 ]
  then
    FILE_NUM=0$COUNTER
  else
    FILE_NUM=$COUNTER
  fi

  ##############
  # Print info #
  ##############
  echo "Time to create file 0000-01-$FILE_NUM-$STUDENT.md in $COLLAB_REPO"
  # shellcheck disable=SC2129
  echo "---" > "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "layout: slide" >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo 'title: "Welcome to our slide deck!"' >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "---" >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "" >> "0000-01-$FILE_NUM-$STUDENT.md"

  #####################
  # Array of octocats #
  #####################
  OCTOCATS=("![riddlocat](https://octodex.github.com/images/riddlocat.png)"  "![skitchtocat](https://octodex.github.com/images/skitchtocat.png)"  "![luchadortocat](https://octodex.github.com/images/luchadortocat.png)"  "![codercat](https://octodex.github.com/images/codercat.jpg)"  "![dojocat](https://octodex.github.com/images/dojocat.jpg)"  "![dodgetocat](https://octodex.github.com/images/dodgetocat_v2.png)"  "![steroidtocat](https://octodex.github.com/images/steroidtocat.png)"  "![inflatocat](https://octodex.github.com/images/inflatocat.png)"  "![poptocat](https://octodex.github.com/images/poptocat.png)"  "![Robotocat](https://octodex.github.com/images/Robotocat.png)"  "![saritocat](https://octodex.github.com/images/saritocat.png)"  "![jetpacktocat](https://octodex.github.com/images/jetpacktocat.png)"  "![cooler-octocat](https://octodex.github.com/images/twenty-percent-cooler-octocat.png)" "![octocat-de-los-muertos](https://octodex.github.com/images/octocat-de-los-muertos.jpg)" "![poptocat2](https://octodex.github.com/images/poptocat_v2.png)" "![minertocat](https://octodex.github.com/images/minertocat.png)" "![femalecodertocat](https://octodex.github.com/images/femalecodertocat.png)" "![cherryontop-o-cat](https://octodex.github.com/images/cherryontop-o-cat.png)" "![orderedlistocat](https://octodex.github.com/images/orderedlistocat.png)" "![herme-t-crabb](https://octodex.github.com/images/herme-t-crabb.png)" "![droidtocat](https://octodex.github.com/images/droidtocat.png)" "![snowoctocat](https://octodex.github.com/images/snowoctocat.png)" "![boxertocat](https://octodex.github.com/images/boxertocat_octodex.jpg)" "![skatetocat](https://octodex.github.com/images/skatetocat.png)" "![labtocat](https://octodex.github.com/images/labtocat.png)" "![Mardigrastocat](https://octodex.github.com/images/Mardigrastocat.png)" "![defunktocat](https://octodex.github.com/images/defunktocat.png)" "![catstello](https://octodex.github.com/images/catstello.png)" "![constructocat](https://octodex.github.com/images/constructocat2.jpg)" "![kimonotocat](https://octodex.github.com/images/kimonotocat.png)" "![octofez](https://octodex.github.com/images/octofez.png)" "![dinotocat](https://octodex.github.com/images/dinotocat.png)" )

  ################
  # Get a random #
  ################
  RANDOM_OCTOCAT=${OCTOCATS[$RANDOM % ${#OCTOCATS[@]} ]}
  # shellcheck disable=SC2129
  echo "Caption here" >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "" >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "$RANDOM_OCTOCAT" >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "{: .center}" >> "0000-01-$FILE_NUM-$STUDENT.md"

  ################
  # Check the OS #
  ################
  if [[ "$OSTYPE" = "msys" ]]; then
    # shellcheck disable=SC2002
    NEW_FILE=$(cat "0000-01-$FILE_NUM-$STUDENT.md" | base64 --wrap=0)
  else
    # shellcheck disable=SC2002
    NEW_FILE=$(cat "0000-01-$FILE_NUM-$STUDENT.md" | base64)
  fi

  ###################################
  # now create the file on the repo #
  ###################################
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"path\": \"_posts/0000-01-$FILE_NUM-$STUDENT.md\", \"message\": \"Activity file for $STUDENT\", \"content\": \"$NEW_FILE\"}" -X PUT "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/contents/_posts/0000-01-$FILE_NUM-$STUDENT.md" >> log.out 2>&1

  #########################
  # Remove the local file #
  #########################
  rm "0000-01-$FILE_NUM-$STUDENT.md"
}
################################################################################
#### Function CreateIssue ######################################################
function CreateIssue ()
{
  ################
  # Pull in vars #
  ################
  COUNTER=$1

  ##############################
  # is there already an issue? #
  ##############################
  ISSUES=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" | jq '.[] | {issueNum: .number, issueTitle: .title}') >> log.out 2>&1

  ########################################
  # create the body of the issue comment #
  ########################################
  TEMP_TEXT="Using the API, I have just created a file with a random octocat for you to caption. In this activity, we will learn how to make changes to files in our GitHub repository.\n\n"
  for i in "${COMMENTERS[@]}"
  do
    STUDENT=$(echo "$i" | (sed -e 's/^"//' -e 's/"$//'))
    TEMP_TEXT="$TEMP_TEXT- [ ] @$STUDENT\n"
  done
  echo -e "Here is the issue text: $TEMP_TEXT"

  ###################################
  # decide whether to post or patch #
  ###################################
  if echo "$ISSUES" | grep -iq "Activity 1"
  then
    #get the issue number
    echo "Please point me to the correct issue"
    echo "To update the list of students (just type the number)"
    echo "$ISSUES"
    ##############
    # Read input #
    ##############
    read -r CAPTION_ISSUE

    ############
    # Patch it #
    ############
    curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"body\": \"$TEMP_TEXT\"}" -X PATCH "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues/$CAPTION_ISSUE/comments/1" >> log.out 2>&1
  else
    ######################
    # create a new issue #
    ######################
    curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Activity 1: Your First Caption\", \"body\": \"$TEMP_TEXT\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1

    #####################
    # Run the first run #
    #####################
    FirstRun
  fi
}
################################################################################
#### Function FirstRun #########################################################
function FirstRun ()
{
  ###################################
  # create extended activity issues #
  ###################################
  # shellcheck disable=SC2129
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Add A New Slide\", \"body\": \"## We Need More Slides\nGrab another octocat and create a new slide from scratch.\n If you need help, check out the Appendix in the training manual.\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Add a Caption To an Existing Slide\", \"body\": \"## Can you think of a better caption?\nEach slide can have more than one caption. Check out the current slide show and add a caption (or two).\n If you need help, check out the Appendix in the training manual.\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Improve the README\", \"body\": \"## Do you have a favorite Git Resource?\nAdd it to the README!\n If you need help, check out the Appendix in the training manual.\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Restyle the Slides\", \"body\": \"## Do you have an eye for design?\nHelp us improve the look of the slide deck.\n If you need help, check out the Appendix in the training manual.\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Parking Lot\", \"body\": \"## Post any questions you may have here during the training.\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1

  ##################################
  # create a file for $TOKEN_OWNER #
  ##################################
  CreateFile "$TOKEN_OWNER" 2

  ###################
  # Make it private #
  ###################
  MakePrivate
}
################################################################################
#### Function MakePrivate ######################################################
function MakePrivate ()
{
  ################################
  # is the repo already private? #
  ################################
  REPO_STATUS=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO" | jq .private) >> log.out 2>&1

  ############
  # Check it #
  ############
  if "$REPO_STATUS"
  then
    echo "This repo is already private."
  else
    echo "Are you ready to make this repo private? Y or N"
    ##############
    # Read input #
    ##############
    read -r FLIP_SWITCH

    ###################
    # Check the input #
    ###################
    if echo "$FLIP_SWITCH" | grep -iq "^y" ;
    then
      ##########################
      # switch repo to private #
      ##########################
      curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"name\": \"$COLLAB_REPO\", \"private\": true}" -X PATCH "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO" >> log.out 2>&1

      #########################
       # ask about adding 1:1s #
       #########################
       echo "Does this class get 1:1 sessions? Y or N"
       ##############
       # Read input #
       ##############
       read -r ONE_ON_ONE
       ###################
       # Check the input #
       ###################
       if echo "$ONE_ON_ONE" | grep -iq "^y" ;
       then
         ######################
         # Create one on ones #
         ######################
         CreateOneOnOnes
       fi
    else
      echo "Ok, just remember to change the repo to private"
      echo "and add the info for booking 1:1 appointments to the README."
    fi
  fi
}
################################################################################
 #### Function CreateOneOnOnes ##################################################
 function CreateOneOnOnes ()
 {
   ########################################
   # create an issue for 1:1 appointments #
   ########################################
   echo "$APPT_URL"
   ISS_TEXT="As part of this class, you will have the opportunity to book one-on-one time with a member of our training team to ask questions, review specific class topics, or get help with a scenario. Each student can book one appointment using the following link: $APPT_URL\n\nThese appointments will be available for 4 weeks after the end of this class.\n\nFYI: "
   for i in "${COMMENTERS[@]}"
   do
     i=$(echo "$i" | (sed -e 's/^"//' -e 's/"$//'))
     ISS_TEXT=$ISS_TEXT"@$i "
   done
   curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Booking 1:1 Appointments\", \"body\": \"$ISS_TEXT\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1
 }

################################################################################
############################### MAIN ###########################################
################################################################################

###################
# Get the collabs #
###################
COLLABS=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/collaborators?affiliation=direct&per_page=100" | jq '.[] | .login') >> log.out 2>&1

######################
# Get the commenters #
######################
COMMENTERS=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues/1/comments?per_page=100" | jq '.[] | .user.login') >> log.out 2>&1

#################
# Get the names #
#################
GetNames
