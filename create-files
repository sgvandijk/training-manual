#!/bin/bash

################################################################################
############################## Create Files ####################################
################################################################################

################
# Source it up #
################
# shellcheck disable=SC1090
source "$HOME/.trainingmanualrc"

###########################################################
# You must have a githubteacher token                     #
# saved to your ENV variables in order to use this script #
###########################################################

###########
# GLOBALS #
###########
COLLAB_REPO=$1

################################################################################
########################## Functions Below #####################################
################################################################################
################################################################################
#### Function ContainsCollab ##################################################
function ContainsCollab ()
{
  local e
  for e in "${@}"; do
    if [[ "$e" == "$1" ]]
    then
      return 0
    fi
  done
  return 1
}
################################################################################
#### Function GetNames #########################################################
function GetNames ()
{
  #######################################################
  # get names of people who have commented on the issue #
  #######################################################
  COUNTER=$(expr ${#COLLABS[@]} + 2)
  for i in "${COMMENTERS[@]}"
  do
    j=$(echo "$i" | (sed -e 's/^"//' -e 's/"$//'))
    if
      ######################
      # Check the elements #
      ######################
      ContainsCollab "$i" "$COLLABS"
    then
      ###############
      # Add collab #
      ##############
      AddCollab "$j"
      if [ $j != $TOKEN_OWNER ]
      then
        CreateFile $j $counter
        ((counter++))
      else
        echo "Skipping creating another file for $j because they are the instructor."
      fi
    else
      echo "Skipping adding $j as a collaborator because they are already a collaborator."
    fi
  done

  ####################
  # Create the issue #
  ####################
  CreateIssue "$COUNTER"
}
################################################################################
#### Function AddCollab ########################################################
function AddCollab ()
{
  ####################
  # Pull in the vars #
  ####################
  STUDENT=$1

  #############
  # Set it up #
  #############
  #STUDENT=$(echo "$STUDENT" | (sed -e 's/^"//' -e 's/"$//'))
  curl -i -u "$TOKEN_OWNER:$TEACHER_PAT" -X PUT "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/collaborators/$STUDENT"
}
################################################################################
#### Function CreateFile #########################################################
function CreateFile ()
{
  ####################
  # Pull in the vars #
  ####################
  STUDENT=$1
  COUNTER=$2

  #####################
  # Check the counter #
  #####################
  if [ "$COUNTER" -le 9 ]
  then
    FILE_NUM=0$COUNTER
  else
    FILE_NUM=$COUNTER
  fi

  ##############
  # Print info #
  ##############
  echo "Time to create file 0000-01-$FILE_NUM-$STUDENT.md in $COLLAB_REPO"
  # shellcheck disable=SC2129
  echo "---" > "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "layout: slide" >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo 'title: "Welcome to our slide deck!"' >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "---" >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "" >> "0000-01-$FILE_NUM-$STUDENT.md"

  #####################
  # Array of memes #
  #####################
  MEMES=("![angry-cat](https://cloud.githubusercontent.com/assets/16547949/25400569/064d7bc6-29c1-11e7-90dc-fef44edd9f0a.jpg)"  "![bad-luck-brian](https://cloud.githubusercontent.com/assets/16547949/25400743/8ae447a2-29c1-11e7-9839-5438d8fcda7b.jpg)"  "![chill-out-lemur](https://cloud.githubusercontent.com/assets/16547949/25400761/9c64ee82-29c1-11e7-8ad3-6886f97634b9.jpg)"  "![dr-evil](https://cloud.githubusercontent.com/assets/16547949/25400776/a776de7a-29c1-11e7-959e-bbad827c2aab.jpg)"  "![evil-raccooon](https://cloud.githubusercontent.com/assets/16547949/25400793/b1104eee-29c1-11e7-89e2-3c99f9ea1941.jpg)"  "![evil-toddler](https://cloud.githubusercontent.com/assets/16547949/25400815/c5847ecc-29c1-11e7-9c5d-05d4a6726545.jpg)"  "![first-day-on-the-internet](https://cloud.githubusercontent.com/assets/16547949/25400874/eca2ebce-29c1-11e7-969d-de87b82a7061.jpg)"  "![fist-bump-puppy](https://cloud.githubusercontent.com/assets/16547949/25400830/d1cd1bb2-29c1-11e7-82bd-27d847701c59.jpg)"  "![fresh-prince](https://cloud.githubusercontent.com/assets/16547949/25400882/f44a7464-29c1-11e7-8f45-327d67cb961a.jpg)"  "![fry](https://cloud.githubusercontent.com/assets/16547949/25400891/fb18941a-29c1-11e7-82b9-35e589443a60.jpg)"  "![homer-agh](https://cloud.githubusercontent.com/assets/16547949/25400895/02672eca-29c2-11e7-87a5-3dc3d3110c29.jpg)"  "![homer-hide](https://cloud.githubusercontent.com/assets/16547949/25400902/0a553f14-29c2-11e7-9a40-8d14136b4fa3.jpg)" "![humpday](https://cloud.githubusercontent.com/assets/16547949/25400910/10641d9e-29c2-11e7-80c8-5c38ea261b22.jpg)" "![leia](https://cloud.githubusercontent.com/assets/16547949/25400918/17c5d2e4-29c2-11e7-92ef-79bacb424ef4.jpg)" "![luke](https://cloud.githubusercontent.com/assets/16547949/25400950/3a263b30-29c2-11e7-8f09-02127726c1e1.jpg)" "![morpheus](https://cloud.githubusercontent.com/assets/16547949/25400958/410316ee-29c2-11e7-9e6d-9d13999e76e3.jpg)" "![most-interesting-man](https://cloud.githubusercontent.com/assets/16547949/25400967/47a9dd52-29c2-11e7-9623-e913672a3eec.jpg)" "![obama](https://cloud.githubusercontent.com/assets/16547949/25400972/4de67090-29c2-11e7-96a6-8631407b6e4f.jpg)" "![one-does-not-simply](https://cloud.githubusercontent.com/assets/16547949/25400982/542b10d2-29c2-11e7-9cd6-f0d07042f1d2.jpg)" "![paddling](https://cloud.githubusercontent.com/assets/16547949/25400987/5bb3c4e8-29c2-11e7-9616-5c9afe759173.jpg)" "![panda-birthday](https://cloud.githubusercontent.com/assets/16547949/25400994/60f64804-29c2-11e7-8a6d-4401d7d294b9.jpg)" "![philosoraptor](https://cloud.githubusercontent.com/assets/16547949/25401001/66d677c6-29c2-11e7-9b12-263e036c236e.jpg)" "![picard-facepalm](https://cloud.githubusercontent.com/assets/16547949/25401008/6f0a5f0c-29c2-11e7-8ade-705cc5e57333.jpg)" "![puss-in-boots](https://cloud.githubusercontent.com/assets/16547949/25401020/740dd682-29c2-11e7-9906-ac5c3a8496c7.jpg)" "![sad-puppy](https://cloud.githubusercontent.com/assets/16547949/25401096/b9e619ee-29c2-11e7-8ee3-74a301737d34.jpg)" "![skeletor-victory](https://cloud.githubusercontent.com/assets/16547949/25401162/f580fadc-29c2-11e7-99c2-0c6cfb5dd1cd.jpg)" "![spongebob-rainbow](https://cloud.githubusercontent.com/assets/16547949/25401179/038f12ee-29c3-11e7-8362-f92422b7da35.jpg)" "![steve-harvey](https://cloud.githubusercontent.com/assets/16547949/25401187/0af0e288-29c3-11e7-9a88-38efd8b375cc.jpg)" "![success-kid](https://cloud.githubusercontent.com/assets/16547949/25401204/136e768c-29c3-11e7-8a7b-8724fee13dd7.jpg)" "![willy-wonka](https://cloud.githubusercontent.com/assets/16547949/25401209/19a78926-29c3-11e7-9dd5-6ccc07e38f54.jpg)" "![winter-is-coming](https://cloud.githubusercontent.com/assets/16547949/25401218/203cc85a-29c3-11e7-8bbf-8c7d4a6b81b2.jpg)"  "![yoda](https://cloud.githubusercontent.com/assets/16547949/25401233/2c9215d8-29c3-11e7-9e9b-d7cbccefb17a.jpg)" )

  ################
  # Get a random #
  ################
  RANDOM_MEME=${MEMES[$RANDOM % ${#MEMES[@]} ]}
  # shellcheck disable=SC2129
  echo "Caption here" >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "" >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "$RANDOM_MEME" >> "0000-01-$FILE_NUM-$STUDENT.md"
  # shellcheck disable=SC2129
  echo "{: .center}" >> "0000-01-$FILE_NUM-$STUDENT.md"

  ################
  # Check the OS #
  ################
  if [[ "$OSTYPE" = "msys" ]]; then
    # shellcheck disable=SC2002
    NEW_FILE=$(cat "0000-01-$FILE_NUM-$STUDENT.md" | base64 --wrap=0)
  else
    # shellcheck disable=SC2002
    NEW_FILE=$(cat "0000-01-$FILE_NUM-$STUDENT.md" | base64)
  fi

  ###################################
  # now create the file on the repo #
  ###################################
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"path\": \"_posts/0000-01-$FILE_NUM-$STUDENT.md\", \"message\": \"Activity file for $STUDENT\", \"content\": \"$NEW_FILE\"}" -X PUT "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/contents/_posts/0000-01-$FILE_NUM-$STUDENT.md" >> log.out 2>&1

  #########################
  # Remove the local file #
  #########################
  rm "0000-01-$FILE_NUM-$STUDENT.md"
}
################################################################################
#### Function CreateIssue ######################################################
function CreateIssue ()
{
  ################
  # Pull in vars #
  ################
  COUNTER=$1

  ##############################
  # is there already an issue? #
  ##############################
  ISSUES=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" | jq '.[] | {issueNum: .number, issueTitle: .title}') >> log.out 2>&1

  ########################################
  # create the body of the issue comment #
  ########################################
  TEMP_TEXT="Using the API, I have just created a file with a random meme for you to caption. In this activity, we will learn how to make changes to files in our GitHub repository.\n\n"
  for i in "${COMMENTERS[@]}"
  do
    STUDENT=$(echo "$i" | (sed -e 's/^"//' -e 's/"$//'))
    TEMP_TEXT=$TEMP_TEXT"- [ ] @$STUDENT\n"
  done
  echo "Here is the issue text: $TEMP_TEXT"

  ###################################
  # decide whether to post or patch #
  ###################################
  if echo "$ISSUES" | grep -iq "Activity 1"
  then
    #get the issue number
    echo "Please point me to the correct issue"
    echo "To update the list of students (just type the number)"
    echo "$ISSUES"
    ##############
    # Read input #
    ##############
    read -r CAPTION_ISSUE

    ############
    # Patch it #
    ############
    curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"body\": \"$TEMP_TEXT\"}" -X PATCH "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues/$CAPTION_ISSUE/comments/1" >> log.out 2>&1
  else
    ######################
    # create a new issue #
    ######################
    curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Activity 1: Your First Caption\", \"body\": \"$TEMP_TEXT\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1

    #####################
    # Run the first run #
    #####################
    FirstRun
  fi
  MakePrivate
}
################################################################################
#### Function FirstRun #########################################################
function FirstRun ()
{
  ###################################
  # create extended activity issues #
  ###################################
  # shellcheck disable=SC2129
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Add A New Slide\", \"body\": \"## We Need More Slides\nGrab another meme and create a new slide from scratch.\n If you need help, check out the Appendix in the training manual.\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Add a Caption To an Existing Slide\", \"body\": \"## Can you think of a better caption?\nEach slide can have more than one caption. Check out the current slide show and add a caption (or two).\n If you need help, check out the Appendix in the training manual.\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Improve the README\", \"body\": \"## Do you have a favorite Git Resource?\nAdd it to the README!\n If you need help, check out the Appendix in the training manual.\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Restyle the Slides\", \"body\": \"## Do you have an eye for design?\nHelp us improve the look of the slide deck.\n If you need help, check out the Appendix in the training manual.\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Parking Lot\", \"body\": \"## Post any questions you may have here during the training.\"}" -X "POST https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues" >> log.out 2>&1

  ##################################
  # create a file for $TOKEN_OWNER #
  ##################################
  CreateFile "$TOKEN_OWNER" 2

  ###################
  # Make it private #
  ###################
  MakePrivate
}
################################################################################
#### Function MakePrivate ######################################################
function MakePrivate ()
{
  ################################
  # is the repo already private? #
  ################################
  REPO_STATUS=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO" | jq .private) >> log.out 2>&1

  ############
  # Check it #
  ############
  if "$REPO_STATUS"
  then
    echo "This repo is already private."
  else
    echo "Are you ready to make this repo private? Y or N"
    ##############
    # Read input #
    ##############
    read -r FLIP_SWITCH

    ###################
    # Check the input #
    ###################
    if echo "$FLIP_SWITCH" | grep -iq "^y" ;
    then
      ##########################
      # switch repo to private #
      ##########################
      curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"name\": \"$COLLAB_REPO\", \"private\": true}" -X PATCH "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO" >> log.out 2>&1
    else
      echo "Ok, just remember to change the repo to private"
    fi
  fi
}

################################################################################
############################### MAIN ###########################################
################################################################################

###################
# Get the collabs #
###################
COLLABS=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/collaborators?affiliation=direct&per_page=100 | jq '.[] | .login') >> log.out 2>&1

######################
# Get the commenters #
######################
COMMENTERS=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/issues/1/comments?per_page=100" | jq '.[] | .user.login') >> log.out 2>&1

#################
# Get the names #
#################
GetNames
