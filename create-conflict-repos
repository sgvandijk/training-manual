#!/usr/bin/env bash
#
# Class Setup

#################################################################
# NOTE: You must have a personal access token (PAT)             #
# saved to your environment variables to use this script.       #
# We recommend a dedicated service account (e.g. githubteacher) #
#################################################################

# shellcheck source=script/shared_functions
source ./shared_functions

# variables
collab_repo=$1
org_url="https://$ROOT_URL/$CLASS_ORG"
org_endpoint="https://$INSTANCE_URL/repos/$CLASS_ORG"
template_url="https://github.com/githubtraining/polygons"
template_url_ghes="https://$TOKEN_OWNER:$TEACHER_PAT@$ROOT_URL/$CLASS_ORG/polygons"

check_template_url() {
  # if root url is not github.com
  if [ "$ROOT_URL" != "github.com" ]; then
    # if template can be found on GHES
    if repo_is_reachable "$template_url_ghes"; then
      # use template from GHES instead of the public template
      template_url="$template_url_ghes"
    # otherwise check if public template can be reached
    elif repo_is_reachable "$template_url"; then
      echo "Template not found on $ROOT_URL. Using public template instead: $template_url"
    else # template could not be reached
      print_error "Could not reach template repo. Please grab a copy from $template_url and upload it to your GHES instance."
    fi
  # if template cannot be reached
  elif ! repo_is_reachable "$template_url"; then
    print_error "Unable to reach template repo: $template_url"
  fi
}

clone_template() {
  # create a temporary directory for temporary files
  temp_dir=$(mktemp -d)

  # delete the temporary directory on script exit
  trap 'rm -rf "$temp_dir"' EXIT

  # attempt to clone template repo
  git clone --bare "$template_url" "$temp_dir" >>log.out 2>&1 || {
    # if git clone command failed
    print_error "Failed to clone template repository."
    exit 1
  }
}

generate_repos() {
  # Create conflict repos based on collaborators in the inital class repo
  # :? will display an error if $collaborators is empty or unset
  for username in "${collaborators[@]:?}"; do
    # if a conflict-practice repo has already been created for the user
    if repo_is_reachable "$org_url/conflict-practice-$username"; then
      # ask if the repository should be deleted and recreated
      if ask "A conflict-practice repo already exists for $username. Is it OK to delete and recreate?" N; then
        echo "Deleting $CLASS_ORG/conflict-practice-$username..."
        # delete the existing conflict-practice repo
        curl -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
          -X DELETE "$org_endpoint/conflict-practice-$username" >>log.out 2>&1
        # create a new conflict-practice repo
        create_repo "$username"
      else
        echo "OK. Skipping $username..."
      fi
    else
      # create a new conflict-practice repository
      create_repo "$username"
    fi
  done
}

create_repo() {
  student=$1
  repo_name="conflict-practice-$student"
  repo_url="https://$ROOT_URL/$CLASS_ORG/$repo_name"

  echo "Creating $CLASS_ORG/$repo_name for $student..."

  # Create a new repo named conflict-practice-$student in $CLASS_ORG
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
    -d "{ \"name\": \"$repo_name\", \"description\": \"Let's resolve some conflicts.\", \"private\": false, \"has_issues\": true, \"has_wiki\": true, \"has_downloads\": true}" \
    -X POST "https://$INSTANCE_URL/orgs/$CLASS_ORG/repos" >>log.out 2>&1

  # Add student as a collaborator
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
    -X PUT "$org_endpoint/$repo_name/collaborators/$student" >>log.out 2>&1

  echo "Pushing commits to $CLASS_ORG/$repo_name..."
  git push --mirror "https://$TOKEN_OWNER:$TEACHER_PAT@$ROOT_URL/$CLASS_ORG/$repo_name" >>log.out 2>&1 || {
    # if git push command failed
    print_error "Failed to push."
    exit 1
  }

  # Set default branch to main
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
    -d "{\"default_branch\":\"main\"}" \
    -X PATCH "$org_endpoint/$repo_name" >>log.out 2>&1

  # Create PRs for each branch
  {
    curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
      -d "{ \"title\": \"Updates to game manual\", \"head\": \"manual\", \"base\": \"main\", \"body\": \"This pull request edits the wording of some of the language on the main page. It appears that it has also been edited on main, because there's a merge conflict. Please make sure that all of the words are the ones that you'd like to use, and that there aren't any lines of text missing.\n\nIf you need any help resolving this conflict, check out this video: https://vimeo.com/225093022/6c1c6eb72b\"}" \
      -X POST "$org_endpoint/$repo_name/pulls"
    curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
      -d "{ \"title\": \"Minor CSS fixes\", \"head\": \"css-changes\", \"base\": \"main\", \"body\": \"This pull request makes some small changes to the CSS. Pick the CSS that you think makes the most sense given the history of the file on both branches and resolve the merge conflict.\n\nIf you need any help resolving this conflict, check out this video: https://vimeo.com/225086721/5a00221234\"}" \
      -X POST "$org_endpoint/$repo_name/pulls"
    curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" \
      -d "{ \"title\": \"Update README\", \"head\": \"readme-update\", \"base\": \"main\", \"body\": \"This pull request updates the README.md. Resolve the merge conflicts and make sure the final version of the README.md is accurate and descriptive.\n\nIf you need any help resolving this conflict, check out this video: https://vimeo.com/225086807/17d3c84475\"}" \
      -X POST "$org_endpoint/$repo_name/pulls"
  } >>log.out 2>&1

  print_done "Repo URL: $repo_url"
}

# get list of repo collaborators
get_collaborators "$collab_repo"

# check template url
check_template_url

# clone template repository
clone_template

# switch to temp directory and push it on the stack
pushd "$temp_dir" >>log.out 2>&1 || return

# generate a repo for each collaborator
generate_repos

# switch back to original directory
popd >>log.out 2>&1 || return

print_success "All practice-conflict repos can be found here: $org_url"
