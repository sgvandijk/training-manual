#!/bin/bash

################################################################################
############################### Class Setup ####################################
################################################################################

###########################################################
# NOTE:                                                   #
# You must have a githubteacher token                     #
# saved to your ENV variables in order to use this script #
###########################################################

###########
# GLOBALS #
###########
COLLAB_REPO=$1

################################################################################
########################## Functions Below #####################################
################################################################################
################################################################################
#### Function ContainsElement ##################################################
function ContainsElement ()
{
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 1; done
  return 0
}
################################################################################
#### Function GetNames #########################################################
function GetNames ()
{
  echo "Trying to clone a template repo from $ROOT_URL."

  ######################
  # Check the root url #
  ######################
  if [ "$ROOT_URL" = "github.com" ]; then
    ##############
    # Clone repo #
    ##############
    git clone --bare "https://github.com/githubtraining/polygons" conflict-template >> log.out 2>&1

    #######################
    # Load the error code #
    #######################
    ERROR_CODE=$?

    ##############################
    # Check the shell for errors #
    ##############################
    if [ $ERROR_CODE -ne 0 ]; then
      echo "!!! Couldn't clone polygons repo at all. Please grab a copy from https://github.com/githubtraining/polygons and upload it to your GHE instance."
      exit 1
    fi
  else
    ##############
    # Clone repo #
    ##############
    git clone --bare "https://$TOKEN_OWNER:$TEACHER_PAT@$ROOT_URL/$CLASS_ORG/polygons" conflict-template >> log.out 2>&1

    #######################
    # Load the error code #
    #######################
    ERROR_CODE=$?

    ##############################
    # Check the shell for errors #
    ##############################
    if [ $ERROR_CODE -ne 0 ]; then
      echo "!!! Couldn't clone template repo at all. Please grab a copy from https://github.com/githubtraining/polygons and upload it to your GHE instance."
      exit 1
    fi
  fi

  pushd conflict-template
  COLLABS=($(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/collaborators?per_page=100" | jq '.[] | .login')) >> log.out 2>&1

  #get facilitator name from README
  TEACHER=$(curl -H "Accept: application/vnd.github.VERSION.raw" -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/$COLLAB_REPO/contents/README.md" | grep "^- Facilitator: @" | sed 's/- Facilitator: @//') >> log.out 2>&1
  #make sure no one is teaching class
  echo "A new conflict-practice repo is about to be created for $TEACHER. If one already exists, it will be deleted."
  echo "Is that OK? (Y or N)"
  #################
  # Read in input #
  #################
  read -r CLASS_TIME

  ###################
  # Check the input #
  ###################
  if echo "$CLASS_TIME" | grep -iq "^y" ; then
    #####################
    # Create a new repo #
    #####################
    echo "Deleting githubschool/conflict-practice-$TEACHER repo..."
    curl -i -u "$TOKEN_OWNER:$TEACHER_PAT" -X DELETE "https://$INSTANCE_URL/repos/$CLASS_ORG/conflict-practice-$TEACHER"
  else
    ######################
    # Dont create a repo #
    ######################
    echo "A conflict-practice repo wasn't created for the facilitator, creating for the students..."
  fi

  ###############################
  # Get the array of all owners #
  ###############################
  OWNERS_ARRAY=( "${OWNERS_ARRAY[@]/"$TEACHER"}" )
  for i in "${COLLABS[@]}"
  do
     if
     ###################
     # We have a match #
     ###################
     ContainsElement "$i" "${OWNERS_ARRAY[*]}"
   then
    ########################
    # Clear spaces in name #
    ########################
    i=$(echo "$i" | (sed -e 's/^"//' -e 's/"$//'))
    REPO_STATUS=$(curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/repos/$CLASS_ORG/conflict-practice-$i" | grep "^Status:") >> log.out 2>&1
    echo "repoStatus for [$i] is [$REPO_STATUS]"
    if
      echo "$REPO_STATUS" | grep -iq "404"
    then
      ###################
      # Create the repo #
      ###################
      CreateRepo "$i"
    else
      echo "Skipping [$i] because they already have a repo."
    fi
   else
     echo "Skipping [$i] because they are an owner in this org."
   fi
  done
  popd

  #########################
  # Remove the local file #
  #########################
  echo "Remove the local (temporary) clone"
  rm -rf conflict-template
}
################################################################################
#### Function CreateRepo #######################################################
function CreateRepo () {
  STUDENT=$1
  STUDENT_REPO="conflict-practice-$STUDENT"
  echo "Time to create $STUDENT_REPO for $STUDENT"
  ####################################################################
  # create a repo named conflict-practice-$STUDENT in $CLASS_ORG org #
  ####################################################################
  echo "Create server-side location for fresh $CLASS_ORG/$STUDENT_REPO repo..."
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"name\": \"$STUDENT_REPO\", \"description\": \"Let's resolve some conflicts.\", \"private\": false, \"has_issues\": true, \"has_wiki\": true, \"has_downloads\": true}" -X POST "https://$INSTANCE_URL/orgs/$CLASS_ORG/repos" >> log.out 2>&1

  #########################
  # Wait to let it finish #
  #########################
  echo "Resting 5 seconds to allow repo creation to resolve"
  sleep 5

  #################################
  # add student as a collaborator #
  #################################
  # shellcheck disable=SC2129
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -X PUT "https://$INSTANCE_URL/repos/$CLASS_ORG/$STUDENT_REPO/collaborators/$STUDENT" >> log.out 2>&1
  echo "Push the fresh $STUDENT_REPO back to $CLASS_ORG ..."
  git push --mirror "https://$TOKEN_OWNER:$TEACHER_PAT@$ROOT_URL/$CLASS_ORG/$STUDENT_REPO" >> log.out 2>&1

  #########################
  # Wait to let it finish #
  #########################
  echo "Waiting for push to resolve before creating pull requests."
  sleep 5

  ##############################
  # create PRs for each branch #
  ##############################
  # shellcheck disable=SC2129
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Updates to game manual\", \"head\": \"manual\", \"base\": \"master\", \"body\": \"This pull request edits the wording of some of the language on the main page. It appears that it has also been edited on master, because there's a merge conflict. Please make sure that all of the words are the ones that you'd like to use, and that there aren't any lines of text missing.\n\nIf you need any help resolving this conflict, check out this video: https://vimeo.com/225093022/6c1c6eb72b\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$STUDENT_REPO/pulls" >> log.out 2>&1
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Minor CSS fixes\", \"head\": \"css-changes\", \"base\": \"master\", \"body\": \"This pull request makes some small changes to the CSS. Pick the CSS that you think makes the most sense given the history of the file on both branches and resolve the merge conflict.\n\nIf you need any help resolving this conflict, check out this video: https://vimeo.com/225086721/5a00221234\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$STUDENT_REPO/pulls" >> log.out 2>&1
  curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{ \"title\": \"Update README\", \"head\": \"readme-update\", \"base\": \"master\", \"body\": \"This pull request updates the README.md. Resolve the merge conflicts and make sure the final version of the README.md is accurate and descriptive.\n\nIf you need any help resolving this conflict, check out this video: https://vimeo.com/225086807/17d3c84475\"}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$STUDENT_REPO/pulls" >> log.out 2>&1

  ##########################
  # assign PRs to $STUDENT #
  ##########################
  for i in {1..3};
    do curl -s -i -u "$TOKEN_OWNER:$TEACHER_PAT" -d "{\"assignees\": [\"$STUDENT\"]}" -X POST "https://$INSTANCE_URL/repos/$CLASS_ORG/$STUDENT_REPO/issues/$i/assignees" >> log.out 2>&1;
  done
}
################################################################################
############################### MAIN ###########################################
################################################################################

########################################
# Get name of collaborators from day 1 #
########################################
# shellcheck disable=SC2178
OWNERS_ARRAY=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET "https://$INSTANCE_URL/orgs/$CLASS_ORG/members?role=admin" | jq '.[] | .login') >> log.out 2>&1

##################
# Get User names #
##################
GetNames
